#!/usr/bin/env node

MODE = process.argv[2];
VERSION = process.argv[3];
var util            = require('util')
,   exec           = require('child_process').exec
,   shjs            = require('shelljs')
,   tempRepoDir    = 'temp/repositories'
,	oldVer          = process.argv[4];

var commandQueue = [],
    child1;

    
function queueCommand(cmd) {
    commandQueue.push(cmd);
}

function executeCommands(callback) {
    var cmd = commandQueue.shift();
    if (cmd) {
		child1 = shjs.exec(cmd, {async:true}, function(err, stdout, stderr) {
        	if (err !== 0) {
        		console.log('ERROR!' + err);
          		util.puts(stderr);
		  		executeCommands(callback);
        	} else {
          		executeCommands(callback);
        	}
		});
    	if (commandQueue.length === 0) {
    		// Attach the callback to the child since this is the last command.
    		child1.on('exit', callback);
   		}
    }
}

//check for git dependancy
if (!shjs.which('git')) {
  queueCommand('echo Sorry, this script requires git');
  exit(1);
}

//if phonegap directory already exisits, make sure it is latest code
if (shjs.test('-d','./phonegap')){
    queueCommand('echo phonegap directory exists');
    queueCommand('cd phonegap && git pull origin master');
    
}else{
    //grab phonegap repo off github
    queueCommand("git clone https://github.com/phonegap/phonegap.git");
}

if (MODE==="prepare"||MODE==="all"){
    //run coho
    queueCommand("./node_modules/coho/coho create-release-snapshot --prev-version "+oldVer+" --new-version "+VERSION);
}

if (MODE==="build"||MODE==="all"){
    //ios
    queueCommand("rm -rf phonegap/lib/ios/*");
    queueCommand("cd cordova-ios && git checkout "+ VERSION);
    queueCommand("cp -r cordova-ios/* phonegap/lib/ios/");

    //android
    queueCommand("rm -rf phonegap/lib/android/*");
    queueCommand("cd cordova-android && git checkout "+ VERSION);
    queueCommand("cd cordova-android && ./bin/create example org.apache.cordova.example example");
    queueCommand("cp -r cordova-android/* phonegap/lib/android/");
    queueCommand("rm -rf phonegap/lib/android/framework && rm -rf phonegap/lib/android/test");
    queueCommand("cp phonegap/lib/android/example/libs/cordova-"+VERSION+".jar phonegap/lib/android/");
    queueCommand("cp phonegap/lib/android/example/assets/www/cordova.js phonegap/lib/android/");
    queueCommand("cp -r phonegap/lib/android/example/res/xml phonegap/lib/android/");

    //blackberry
    queueCommand("rm -rf phonegap/lib/blackberry/*");
    queueCommand("cd cordova-blackberry && git checkout "+ VERSION);
    queueCommand("cd cordova-blackberry/blackberry && ./bin/create ./example org.apache.cordova.example example");
    queueCommand("cd cordova-blackberry/blackberry10 && npm install && ./bin/create ./example org.apache.cordova.example example");
    queueCommand("cp -r cordova-blackberry/* phonegap/lib/blackberry/")

    //windows phone 7
    queueCommand("rm -rf phonegap/lib/windows-phone-7/*");
    queueCommand("cd cordova-wp7 && git checkout "+ VERSION);
    queueCommand("cp -r cordova-wp7/* phonegap/lib/windows-phone-7/");
    
    //windows phone 8
    queueCommand("rm -rf phonegap/lib/windows-phone-8/*");
    queueCommand("cd cordova-wp8 && git checkout "+ VERSION);
    queueCommand("cp -r cordova-wp8/* phonegap/lib/windows-phone-8/");

    //windows 8
    queueCommand("rm -rf phonegap/lib/windows8/*");
    queueCommand("cd cordova-windows && git checkout "+ VERSION);
    queueCommand("cp -r cordova-windows/windows8/* phonegap/lib/windows8/");

    //osx
    queueCommand("rm -rf phonegap/lib/osx/*");
    queueCommand("cd cordova-osx && git checkout "+ VERSION);
    queueCommand("cp -r cordova-osx/* phonegap/lib/osx/");

      
    //cordova cli
    queueCommand("rm -rf phonegap/lib/cordova-cli/*");
    queueCommand("cp -r cordova-cli/README.md phonegap/lib/cordova-cli/");

    //docs
    queueCommand("rm -rf phonegap/doc/*");
    queueCommand("git clone https://github.com/phonegap/phonegap-docs.git");
    queueCommand("cd phonegap-docs && git checkout "+VERSION+" && ./bin/generate && cp -r public/en/"+VERSION+"/* ../phonegap/doc/");
    
    //copy changelog
    queueCommand("cp -r releases/cordova-"+VERSION+"/cordova-"+VERSION+"/changelog phonegap/");

    //copy update version file
    queueCommand("cp -r cordova-android/VERSION phonegap/");
    
    //add phonegap variable to cordova.js files
    queueCommand("for file in $(find phonegap/ -name 'cordova.js'); do echo 'var PhoneGap = cordova;'>>$file; done;");
}

    queueCommand("echo remember to add wp zips");

executeCommands(function(){
	shjs.exec("echo DONE", {async:true}, function(e, stdout, stderr) {
	});
});
